1. Node* lca(Node* root ,int n1 ,int n2 )
    {
       //Your code here 
       if(root==NULL)
       {
           return NULL;
       }
       if(root->data==n1 || root->data==n2)
       {
           return root;
       }
       Node *leftans=lca(root->left,n1,n2);
       Node *rightans=lca(root->right,n1,n2);
       if(leftans && rightans)
       {
           return root;
       }
       if(!leftans)
       {
           return rightans;
       }
       if(!rightans)
       {
           return leftans;
       }
    }
2.node at distance k
void solve1(Node *root,int target,int k,vector<int> &ans)
{
    if(root==NULL || k<0)
    {
        return;
    }
    if(k==0)
    {
       ans.push_back(root->data); 
    }
    solve1(root->left,target,k-1,ans);
    solve1(root->right,target,k-1,ans);
}
int solve2(Node *root,int target,int k,vector<int> &ans)
{
    if(root==NULL)
    {
        return -1;
    }
    if(root->data==target)
    {
        solve1(root,target,k,ans);
        return 0;
    }
    int dl=solve2(root->left,target,k,ans);
    if(dl!=-1)
    {
        if(1+dl==k)
        {
            ans.push_back(root->data);
        }
        else
        {
            solve1(root->right,target,k-dl-2,ans);
        }
        return 1+dl;
    }
    int dr=solve2(root->right,target,k,ans);
    if(dr!=-1)
    {
        if(1+dr==k)
        {
            ans.push_back(root->data);
        }
        else
        {
            solve1(root->left,target,k-dr-2,ans);
        }
        return 1+dr;
    }
}
    vector <int> KDistanceNodes(Node* root, int target , int k)
    {
        // return the sorted vector of all nodes at k dist
        
        vector<int>ans;
        int a=solve2(root,target,k,ans);
         sort(ans.begin(),ans.end());
        return ans;
        
    }
3.all root to leaf path
void solve(Node *root,vector<int>ans,vector<vector<int>> &p)
 {
     if(root==NULL)
     {
         return;
     }
     ans.push_back(root->data);
     if(!root->left && !root->right)
     {
         p.push_back(ans);
     }
     solve(root->left,ans,p);
     solve(root->right,ans,p);
     ans.pop_back();
 }
vector<vector<int>> Paths(Node* root)
{
    // Code here
    vector<vector<int>>p;
    vector<int>ans;
    solve(root,ans,p);
    return p;
}
4.node to root path
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 void solve2(TreeNode *root,int target,vector<int>&ans)
 {
     if(root==NULL)
     {
         return false;
     }
     ans.push_back(root->val);
     if(root->val==target)
     {
         return true;
     }
     if(solve2(root->left,target,ans) ||solve2(root->right,target,ans))
     {
         return true;
     }
     ans.pop_back();
     return false;
 }
vector<int> Solution::solve(TreeNode* A, int B) {
    vector<int>ans;
    bool a=solve2(A,B,ans);
    return ans;
}
5.vertical order
map<int,vector<int>>mp;
        queue<pair<int,Node*>>q;
        q.push(make_pair(0,root));
        while(!q.empty())
        {
                int line=q.front().first;
            Node *temp=q.front().second;
            mp[line].push_back(temp->data);
            q.pop();
            if(temp->left)
            {
               q.push(make_pair(line-1,temp->left)); 
            }
            if(temp->right)
            {
               q.push(make_pair(line+1,temp->right)); 
            }
        }
        vector<int>res;
        for(auto it:mp)
{
    for(auto i:it.second)
    {
    res.push_back(i);
}
}
return res;
6.max path sum from any node
int solve(Node *root,int &ans)
    {
        if(root==NULL)
        {
            return 0;
        }
        int lh=solve(root->left,ans);
        lh=(lh<0)?0:lh;
        int rh=solve(root->right,ans);
        rh=(rh<0)?0:rh;
        ans=max(ans,lh+rh+root->data);
        return max(lh,rh)+root->data;
    }
    int findMaxSum(Node* root)
    {
        // Your code goes here
        int ans=-1e9;
        solve(root,ans);
        return ans;
        
    }
