1. Node* lca(Node* root ,int n1 ,int n2 )
    {
       //Your code here 
       if(root==NULL)
       {
           return NULL;
       }
       if(root->data==n1 || root->data==n2)
       {
           return root;
       }
       Node *leftans=lca(root->left,n1,n2);
       Node *rightans=lca(root->right,n1,n2);
       if(leftans && rightans)
       {
           return root;
       }
       if(!leftans)
       {
           return rightans;
       }
       if(!rightans)
       {
           return leftans;
       }
    }
2.node at distance k
void solve1(Node *root,int target,int k,vector<int> &ans)
{
    if(root==NULL || k<0)
    {
        return;
    }
    if(k==0)
    {
       ans.push_back(root->data); 
    }
    solve1(root->left,target,k-1,ans);
    solve1(root->right,target,k-1,ans);
}
int solve2(Node *root,int target,int k,vector<int> &ans)
{
    if(root==NULL)
    {
        return -1;
    }
    if(root->data==target)
    {
        solve1(root,target,k,ans);
        return 0;
    }
    int dl=solve2(root->left,target,k,ans);
    if(dl!=-1)
    {
        if(1+dl==k)
        {
            ans.push_back(root->data);
        }
        else
        {
            solve1(root->right,target,k-dl-2,ans);
        }
        return 1+dl;
    }
    int dr=solve2(root->right,target,k,ans);
    if(dr!=-1)
    {
        if(1+dr==k)
        {
            ans.push_back(root->data);
        }
        else
        {
            solve1(root->left,target,k-dr-2,ans);
        }
        return 1+dr;
    }
}
    vector <int> KDistanceNodes(Node* root, int target , int k)
    {
        // return the sorted vector of all nodes at k dist
        
        vector<int>ans;
        int a=solve2(root,target,k,ans);
         sort(ans.begin(),ans.end());
        return ans;
        
    }
